name: CI/CD Pipeline

# Ce qui déclenche la pipeline
on:
  push:
    branches:
      - main
    tags:
      - '*'

# Définition des différentes tâches
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Installation des dépendances 
      - name: Install dependencies
        run: go mod download

      # Étape 3 : Exécuter les tests
      - name: Run tests
        run: go test -v ./tests

      # Étape 4 : Obtenir le timestamp pour les images de développement
      - name: Get current timestamp
        run: echo "TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV

      # --- SECTION DOCKER HUB ---
      # Étape 5 : Construire l'image Docker
      - name: Build Docker image for development (branch main)
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:dev-${{ env.TIMESTAMP }} .
      - name: Build Docker image for production (tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:${TAG_NAME}-${{ env.TIMESTAMP }} .

      # Étape 6 : Se connecter à Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 7 : Pousser l'image Docker
      - name: Push Docker image for development
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:dev-${{ env.TIMESTAMP }} ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:dev-${{ env.TIMESTAMP }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:latest

      - name: Push Docker image for production
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-s3-clone:${TAG_NAME}-${{ env.TIMESTAMP }}
      
      # --- SECTION KUBERNETES ---
      # Étape 8 : Configurer kubectl
      - name: Setup kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config

      # Étape 9 : Appliquer les fichiers Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f ingress.yaml

      # Étape 10 : Extraire les informations du déploiement et du service
      - name: Extract Kubernetes deployment and service info
        run: |
          DEPLOYMENT_NAME=my-s3-clone-deployment
          SERVICE_NAME=my-s3-clone-service

          REPLICAS=$(kubectl get deployment $DEPLOYMENT_NAME -o jsonpath='{.status.replicas}')
          READY_REPLICAS=$(kubectl get deployment $DEPLOYMENT_NAME -o jsonpath='{.status.readyReplicas}')
          SERVICE_TYPE=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.spec.type}')
          EXTERNAL_IP=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          PORT=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.spec.ports[0].port}')

          echo "REPLICAS=$REPLICAS" >> $GITHUB_ENV
          echo "READY_REPLICAS=$READY_REPLICAS" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
          echo "PORT=$PORT" >> $GITHUB_ENV

      # Étape 11 : Envoyer des notifications Google Chat avec les informations Kubernetes
      - name: Send success notification with Kubernetes info
        uses: julb/action-post-googlechat-message@v1
        with:
          message: |
            **Pipeline succeeded** for commit ${{ github.sha }} on branch ${{ github.ref }}.
            - Deployment Name: my-s3-clone-deployment
            - Namespace: default
            - Replicas: ${{ env.REPLICAS }}
            - Ready Replicas: ${{ env.READY_REPLICAS }}
            - Service Name: my-s3-clone-service
            - Service Type: ${{ env.SERVICE_TYPE }}
            - External IP: ${{ env.EXTERNAL_IP }}
            - Port: ${{ env.PORT }}
          gchat_webhook_url: ${{ secrets.GCHAT_WEBHOOK_URL }}
        if: ${{ success() }}

      # Étape 12 : Envoyer des notifications Google Chat sur l'échec
      - name: Send failure notification
        uses: julb/action-post-googlechat-message@v1
        with:
          message: "Pipeline failed for commit ${{ github.sha }} on branch ${{ github.ref }}."
          gchat_webhook_url: ${{ secrets.GCHAT_WEBHOOK_URL }}
        if: ${{ failure() }}
